compare_tests = function(deltas, sample_sizes){
n_t_ps = array(0, c(length(sample_sizes), length(deltas)))
n_W_ps = array(0, c(length(sample_sizes), length(deltas)))
T_t_ps = array(0, c(length(sample_sizes), length(deltas)))
T_W_ps = array(0, c(length(sample_sizes), length(deltas)))
for (k in 1:length(sample_sizes)){
n = sample_sizes[k]
normal_t_test_ps = c()
normal_wilcox_test_ps = c()
T5_t_test_ps = c()
T5_wilcox_test_ps = c()
for (j in 1:length(deltas)){
delta = deltas[j]
normal_t_test_p = 0
normal_wilcox_test_p = 0
T5_t_test_p = 0
T5_wilcox_test_p = 0
for (i in 1:500){
normal_results = sim_data(delta, 'Normal', n)
T5_results = sim_data(delta, "T5", n)
if (wilcox.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_wilcox_test_p = normal_wilcox_test_p + 1
}
if (t.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_t_test_p = normal_t_test_p + 1
}
if (wilcox.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_wilcox_test_p = T5_wilcox_test_p + 1
}
if (t.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_t_test_p = T5_t_test_p + 1
}
}
normal_t_test_p = normal_t_test_p/500.0
normal_t_test_ps = c(normal_t_test_ps, normal_t_test_p)
normal_wilcox_test_p = normal_wilcox_test_p/500.0
normal_wilcox_test_ps = c(normal_wilcox_test_ps, normal_wilcox_test_p)
T5_t_test_p = T5_t_test_p/500.0
T5_t_test_ps = c(T5_t_test_ps, T5_t_test_p)
T5_wilcox_test_p = T5_wilcox_test_p/500.0
T5_wilcox_test_ps = c(T5_wilcox_test_ps, T5_wilcox_test_p)
}
print(c(length(normal_t_test_ps), length(normal_wilcox_test_ps), length(T5_t_test_ps), length(T5_wilcox_test_ps)))
print(c(dim(n_t_ps), dim(n_W_ps), dim(T_t_ps), dim(T_W_ps)))
print(k)
n_t_ps[k,] = normal_t_test_ps
n_W_ps[k,] = normal_wilcox_test_ps
T_t_ps[k,] = T5_t_test_ps
T_W_ps[k,] = T5_wilcox_test_ps
}
return_list = list('normal_wilcox' = n_W_ps, 'normal_t_test' = n_t_ps, 'T5_wilcox' = T_W_ps, 'T5_t_test' = T_t_ps)
return(return_list)
}
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
results = compare_tests(deltas, ns)
results
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot = plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot = plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
pallete()
(pal = palette())
10%3
10 % 3
10 %% 3
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
results$T5_t_test
length(deltas)
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
warnings()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[length(pal)%%i])
}
return(plot)
}
make_plots()
(pal = palette())
length(pal)
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], type='--', col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], type="o", lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[1,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_W_test[i,], type="l", lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
results$T5_W_test
restuls
results
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
lines(x = deltas, y = results$T5_wilcox[i,], lty=2)
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = i)
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = i)
}
return(plot)
}
make_plots()
RSS = 3:10 #Right shoe size
LSS = rnorm(RSS, RSS, 0.1) #Left shoe size - similar to RSS
cor(LSS, RSS) #correlation ~ 0.99
weights = 120 + rnorm(RSS, 10*RSS, 10)
##Fit a joint model
m = lm(weights ~ LSS + RSS)
##F-value is very small, but neither LSS or RSS are significant
summary(m)
##Fitting RSS or LSS separately gives a significant result.
summary(lm(weights ~ LSS))
?m
"lm"
?lm
lm(LSS ~ RSS)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", dependencies = TRUE)
library(rstan) # observe startup messages
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
?rstan
setwd("~/Desktop/Other/MS_Courses/Capstone/DS-GA-1006-Project")
library(lda)
library(Metrics)
#Read in data
vocab = scan("modeling/vocab.txt", what="character", sep="\n")
train_price = as.numeric(scan("modeling/train_price.csv", what="character", sep="\n"))
test_price = as.numeric(scan("modeling/test_price.csv", what="character", sep="\n"))
train_docs = scan("modeling/train_docs.csv", what="character", sep="\n")
test_docs = scan("modeling/test_docs.csv", what="character", sep="\n")
#Lex the train/test docs and drop empty docs (after stop word filtering)
train_counts = lexicalize(train_docs, sep = " ", lower = TRUE, count = 1L, vocab = vocab)
empty_train_docs = c()
for (i in seq(1,length(train_counts))) {
if (dim(train_counts[[i]])[2] == 0){
empty_train_docs = append(empty_train_docs,i)
}
}
train_counts = train_counts[-empty_train_docs]
train_price = train_price[-empty_train_docs]
test_counts = lexicalize(test_docs, sep = " ", lower = TRUE, count = 1L, vocab = vocab)
empty_test_docs = c()
for (i in seq(1,length(test_counts))) {
if (dim(test_counts[[i]])[2] == 0){
empty_test_docs = append(empty_test_docs,i)
}
}
test_counts = test_counts[-empty_test_docs]
test_price = test_price[-empty_test_docs]
## Initialize the model parameters
num_topics = 5
params = sample(c(-1, 1), num_topics, replace=TRUE) #Initial coefficients in linear model for response
model = slda.em(documents=train_counts,
K=num_topics,
vocab=vocab,
num.e.iterations=10,
num.m.iterations=4,
alpha=1.0, eta=0.1,
train_price,
params,
variance=var(train_price), #Empirical variance of response
logistic=FALSE,
method="sLDA")
Topics = apply(top.topic.words(model$topics, 5, by.score=TRUE), 2, paste, collapse=" ")
coefs = data.frame(coef(summary(model$model)))
theme_set(theme_bw())
coefs = cbind(coefs, Topics=factor(Topics, Topics[order(coefs$Estimate)]))
coefs = coefs[order(coefs$Estimate),]
qplot(Topics, Estimate, colour=Estimate, size=abs(t.value), data=coefs)
+ geom_errorbar(width=0.5, aes(ymin=Estimate-Std..Error, ymax=Estimate+Std..Error))
+ coord_flip()
predictions = slda.predict(test_counts,
model$topics,
model$model,
alpha = 1.0,
eta=0.1)
mse(predictions, test_price)
library(ggplot2)
Topics = apply(top.topic.words(model$topics, 5, by.score=TRUE), 2, paste, collapse=" ")
coefs = data.frame(coef(summary(model$model)))
theme_set(theme_bw())
coefs = cbind(coefs, Topics=factor(Topics, Topics[order(coefs$Estimate)]))
coefs = coefs[order(coefs$Estimate),]
qplot(Topics, Estimate, colour=Estimate, size=abs(t.value), data=coefs)
+ geom_errorbar(width=0.5, aes(ymin=Estimate-Std..Error, ymax=Estimate+Std..Error))
+ coord_flip()
qplot(Topics, Estimate, colour=Estimate, size=abs(t.value), data=coefs) + geom_errorbar(width=0.5, aes(ymin=Estimate-Std..Error, ymax=Estimate+Std..Error)) + coord_flip()
Topics
model$topics
top.topic.words(model$topics, 5, by.score=TRUE)
top.topic.words(model$topics, 10, by.score=TRUE)
summary(model$model)
qplot(Topics, Estimate, colour=Estimate, data=coefs) + geom_errorbar(width=0.5, aes(ymin=Estimate-Std..Error, ymax=Estimate+Std..Error)) + coord_flip()
install.packages("LDAvis")
model$document_sums
theta = t(apply(model$document_sums + 1, 2, function(x) x/sum(x)))
phi = t(apply(t(model$topics) + 0.1, 2, function(x) x/sum(x)))
document.lengths(train_counts)
term.frequency
list_for_LDA = list(phi = phi,
theta = theta,
doc.length = document.lengths(train_counts),
vocab = vocab,
term.frequency = word.counts(train_docs, vocab = vocab))
word.counts(train_docs, vocab = vocab)
word.counts(train_counts)
list_for_LDA = list(phi = phi,
theta = theta,
doc.length = document.lengths(train_counts),
vocab = vocab,
term.frequency = word.counts(train_counts))
json = createJSON(phi = list_for_LDA$phi,
theta = list_for_LDA$theta,
doc.length = list_for_LDA$doc.length,
vocab = list_for_LDA$vocab,
term.frequency = list_for_LDA$term.frequency)
library(LDAvis)
json = createJSON(phi = list_for_LDA$phi,
theta = list_for_LDA$theta,
doc.length = list_for_LDA$doc.length,
vocab = list_for_LDA$vocab,
term.frequency = list_for_LDA$term.frequency)
serVis(json, out.dir = 'vis', open.browser = TRUE)
install.packages("servr")
serVis(json, out.dir = 'vis', open.browser = TRUE)
seq(3,13,2)
get_mse_for_k = function(num_topics) {
#Initial randomcoefficients in linear model for response
params = sample(c(-1, 1), num_topics, replace=TRUE)
model = slda.em(documents=train_counts,
K=num_topics,
vocab=vocab,
num.e.iterations=10,
num.m.iterations=4,
alpha=1.0, eta=0.1,
train_price,
params,
variance=var(train_price), #Empirical variance of response
logistic=FALSE,
method="sLDA")
predictions = slda.predict(test_counts,
model$topics,
model$model,
alpha = 1.0,
eta=0.1)
MSE = mse(predictions, test_price)
return(MSE)
}
#Search for K over grid
test_Ks = seq(3,13,2)
MSEs = c()
for (K in test_Ks){
MSE = get_mse_for_k(K)
MSEs = append(MSEs, MSE)
}
printf("hello %d\n", 56 )
sprintf("hello %d", 5)
#Function to optimize K
get_mse_for_k = function(num_topics) {
#Initial randomcoefficients in linear model for response
params = sample(c(-1, 1), num_topics, replace=TRUE)
print(sprintf("Testing K = %d\n", num_topics))
print('Fitting model...\n')
model = slda.em(documents=train_counts,
K=num_topics,
vocab=vocab,
num.e.iterations=10,
num.m.iterations=4,
alpha=1.0, eta=0.1,
train_price,
params,
variance=var(train_price), #Empirical variance of response
logistic=FALSE,
method="sLDA")
print('Making predictions...\n')
predictions = slda.predict(test_counts,
model$topics,
model$model,
alpha = 1.0,
eta=0.1)
print('Finding MSE...\n')
MSE = mse(predictions, test_price)
return(MSE)
}
#Search for K over grid
test_Ks = seq(3,13,2)
MSEs = c()
for (K in test_Ks){
MSE = get_mse_for_k(K)
MSEs = append(MSEs, MSE)
}
cat('Fitting model...\n')
#Function to optimize K
get_mse_for_k = function(num_topics) {
#Initial randomcoefficients in linear model for response
params = sample(c(-1, 1), num_topics, replace=TRUE)
cat(sprintf("Testing K = %d\n", num_topics))
cat('Fitting model...\n')
model = slda.em(documents=train_counts,
K=num_topics,
vocab=vocab,
num.e.iterations=10,
num.m.iterations=4,
alpha=1.0, eta=0.1,
train_price,
params,
variance=var(train_price), #Empirical variance of response
logistic=FALSE,
method="sLDA")
cat('Making predictions...\n')
predictions = slda.predict(test_counts,
model$topics,
model$model,
alpha = 1.0,
eta=0.1)
cat('Finding MSE...\n')
MSE = mse(predictions, test_price)
return(MSE)
}
#Search for K over grid
test_Ks = seq(3,13,2)
MSEs = c()
for (K in test_Ks){
MSE = get_mse_for_k(K)
MSEs = append(MSEs, MSE)
}
MSEs
plot(MSEs)
plot(seq(3,5,13),MSEs)
plot(seq(3,13,2),MSEs)
